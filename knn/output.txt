============================= test session starts ==============================
platform linux -- Python 3.7.4, pytest-5.2.1, py-1.8.0, pluggy-0.13.0
rootdir: /submissions/jagilley
collected 9 items

tests/test_a_environment.py .Output of autograder
======================
# of tests:	0/1 tests passed
Overall score:	0/100
======================
FAIL test_k_nearest_neighbor
FAIL - REQUIRED (automatic zero) test_netid
======================

tests/test_collaborative_filtering.py FOutput of autograder
======================
# of tests:	0/1 tests passed
Overall score:	0/100
======================
FAIL test_k_nearest_neighbor
FAIL - REQUIRED (automatic zero) test_netid
======================

tests/test_distances.py .Output of autograder
======================
# of tests:	0/1 tests passed
Overall score:	0/100
======================
FAIL test_k_nearest_neighbor
FAIL - REQUIRED (automatic zero) test_netid
======================
.Output of autograder
======================
# of tests:	0/1 tests passed
Overall score:	0/100
======================
FAIL test_k_nearest_neighbor
FAIL - REQUIRED (automatic zero) test_netid
======================
.Output of autograder
======================
# of tests:	0/1 tests passed
Overall score:	0/100
======================
FAIL test_k_nearest_neighbor
FAIL - REQUIRED (automatic zero) test_netid
======================

tests/test_knn.py FOutput of autograder
======================
# of tests:	0/1 tests passed
Overall score:	0/100
======================
FAIL test_k_nearest_neighbor
FAIL - REQUIRED (automatic zero) test_netid
======================
FOutput of autograder
======================
# of tests:	0/1 tests passed
Overall score:	0/100
======================
FAIL test_k_nearest_neighbor
FAIL - REQUIRED (automatic zero) test_netid
======================

tests/test_movielens_loading.py .Output of autograder
======================
# of tests:	0/1 tests passed
Overall score:	0/100
======================
FAIL test_k_nearest_neighbor
FAIL - REQUIRED (automatic zero) test_netid
======================

tests/test_netid.py .Output of autograder
======================
# of tests:	4/7 tests passed
Overall score:	45/100
======================
FAIL test_k_nearest_neighbor
FAIL test_collaborative_filtering
PASS test_euclidean_distances
PASS test_manhattan_distances
PASS test_cosine_distances
FAIL test_aggregators
PASS test_load_movielens_data
======================


=================================== FAILURES ===================================
_________________________ test_collaborative_filtering _________________________

    def test_collaborative_filtering():
        user_ratings = np.array([
            [1, 0, 1, 2, 1],
            [2, 3, 0, 2, 1],
            [0, 1, 1, 4, 1],
            [2, 3, 3, 0, 3],
            [2, 3, 1, 2, 0],
            [4, 4, 0, 4, 4]
        ])
        real_ratings = np.array([
            [1, 3, 1, 2, 1],
            [2, 3, 1, 2, 1],
            [2, 1, 1, 4, 1],
            [2, 3, 3, 2, 3],
            [2, 3, 1, 2, 1],
            [4, 4, 1, 4, 4]
        ])
>       predictions = collaborative_filtering(user_ratings, n_neighbors=5, aggregator='mode')

tests/test_collaborative_filtering.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_array = array([[1, 0, 1, 2, 1],
       [2, 3, 0, 2, 1],
       [0, 1, 1, 4, 1],
       [2, 3, 3, 0, 3],
       [2, 3, 1, 2, 0],
       [4, 4, 0, 4, 4]])
n_neighbors = 5, distance_measure = 'euclidean', aggregator = 'mode'

    def collaborative_filtering(input_array, n_neighbors,
                                distance_measure='euclidean', aggregator='mode'):
        """
        This is a wrapper function for your KNearestNeighbors class, that runs kNN
        as a collaborative filter.
    
        If there is a 0 in the array, you must impute a value determined by using your
        kNN classifier as a collaborative filter. All non-zero entries should remain
        the same.
    
        For example, if `input_array`(containing data we are trying to impute) looks like:
    
            [[0, 2],
             [1, 2],
             [1, 0]]
    
        We are trying to impute the 0 values by replacing the 0 values with an aggregation of the
        neighbors for that row. The features that are 0 in the row are replaced with an aggregation
        of the corresponding column of the neighbors of that row. For example, if aggregation is 'mean',
        and K = 2 then the output should be:
    
            [[1, 2],
             [1, 2],
             [1, 2]]
    
        Note that the row you are trying to impute for is ignored in the aggregation.
        Use `ignore_first = True` in the predict function of the KNN to accomplish this. If
        `ignore_first = False` and K = 2, then the result would be:
    
            [[(1 + 0) / 2 = .5, 2],
             [1, 2],
             [1, (2 + 0) / 2 = 1]]
    
            = [[.5, 2],
               [1, 2],
               [1, 1]]
    
        This is incorrect because the value that we are trying to replace is considered in the
        aggregation.
    
        The non-zero values are left untouched. If aggregation is 'mode', then the output should be:
    
            [[1, 2],
             [1, 2],
             [1, 2]]
    
    
        Arguments:
            input_array {np.ndarray} -- An input array of shape (n_samples, n_features).
                Any zeros will get imputed.
            n_neighbors {int} -- Number of neighbors to use for prediction.
            distance_measure {str} -- Which distance measure to use. Can be one of
                'euclidean', 'manhattan', or 'cosine'. This is the distance measure
                that will be used to compare features to produce labels.
            aggregator {str} -- How to aggregate a label across the `n_neighbors` nearest
                neighbors. Can be one of 'mode', 'mean', or 'median'.
    
        Returns:
            imputed_array {np.ndarray} -- An array of shape (n_samples, n_features) with imputed
                values for any zeros in the original input_array.
        """
>       raise NotImplementedError()
E       NotImplementedError

code/collaborative_filtering.py:66: NotImplementedError
___________________________ test_k_nearest_neighbor ____________________________

    def test_k_nearest_neighbor():
        datasets = [
            os.path.join('data', x)
            for x in os.listdir('data')
            if os.path.splitext(x)[-1] == '.json'
        ]
    
        aggregators = ['mean', 'mode', 'median']
        distances = ['euclidean', 'manhattan', 'cosine']
        for data_path in datasets:
            # Load data and make sure its shape is correct
            features, targets = load_json_data(data_path)
            targets = targets[:, None]  # expand dims
            for d in distances:
                for a in aggregators:
                    # make model and fit
                    knn = KNearestNeighbor(1, distance_measure=d, aggregator=a)
                    knn.fit(features, targets)
    
                    # predict and calculate accuracy
                    labels = knn.predict(features)
>                   acc = accuracy(targets, labels)

tests/test_knn.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.7/site-packages/sklearn/metrics/classification.py:176: in accuracy_score
    y_type, y_true, y_pred = _check_targets(y_true, y_pred)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y_true = array([[-1.],
       [-1.],
       [-1.],
       [-1.],
       [-1.],
       [-1.],
       [-1.],
       [-1.],
      ...[-1.],
       [-1.],
       [-1.],
       [-1.],
       [-1.],
       [-1.],
       [-1.],
       [-1.],
       [-1.]])
y_pred = array([[0.01818182],
       [0.01818182],
       [0.01818182],
       [0.01818182],
       [0.01818182],
       [0.018...[0.01818182],
       [0.01818182],
       [0.01818182],
       [0.01818182],
       [0.01818182],
       [0.01818182]])

    def _check_targets(y_true, y_pred):
        """Check that y_true and y_pred belong to the same classification task
    
        This converts multiclass or binary types to a common shape, and raises a
        ValueError for a mix of multilabel and multiclass targets, a mix of
        multilabel formats, for the presence of continuous-valued or multioutput
        targets, or for targets of different lengths.
    
        Column vectors are squeezed to 1d, while multilabel formats are returned
        as CSR sparse label indicators.
    
        Parameters
        ----------
        y_true : array-like
    
        y_pred : array-like
    
        Returns
        -------
        type_true : one of {'multilabel-indicator', 'multiclass', 'binary'}
            The type of the true target data, as output by
            ``utils.multiclass.type_of_target``
    
        y_true : array or indicator matrix
    
        y_pred : array or indicator matrix
        """
        check_consistent_length(y_true, y_pred)
        type_true = type_of_target(y_true)
        type_pred = type_of_target(y_pred)
    
        y_type = {type_true, type_pred}
        if y_type == {"binary", "multiclass"}:
            y_type = {"multiclass"}
    
        if len(y_type) > 1:
            raise ValueError("Classification metrics can't handle a mix of {0} "
>                            "and {1} targets".format(type_true, type_pred))
E           ValueError: Classification metrics can't handle a mix of binary and continuous targets

/usr/local/lib/python3.7/site-packages/sklearn/metrics/classification.py:81: ValueError
_______________________________ test_aggregators _______________________________

    def test_aggregators():
        _features = np.array([
            [-1, 1, 1, -1, 2],
            [-1, 1, 1, -1, 1],
            [-1, 2, 2, -1, 1],
            [-1, 1, 1, -1, 1],
            [-1, 1, 1, -1, 1]
        ])
    
        _predict = np.array([
            [-1, 1, 0, -1, 0],
            [-1, 1, 1, -1, 0],
            [-1, 0, 1, 0, 0],
            [-1, 1, 1, -1, 1],
            [-1, 1, 1, -1, 0]
        ])
        _targets = np.array([
            [1, 0, 1],
            [1, 1, 5],
            [3, 1, 1],
            [1, 1, 2],
            [5, 1, 1]
        ])
        aggregators = ['mean', 'mode', 'median']
        answers = [
            np.repeat(np.mean(_targets, axis=0, keepdims=True), _targets.shape[0], axis=0),
            np.ones_like(_targets),
            np.repeat(np.median(_targets, axis=0, keepdims=True), _targets.shape[0], axis=0)
        ]
        _est = []
        for a in aggregators:
            knn = KNearestNeighbor(5, aggregator=a)
            knn.fit(_features, _targets)
            y = knn.predict(_predict)
            _est.append(y)
>       assert (np.allclose(_est, answers))

tests/test_knn.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<__array_function__ internals>:6: in allclose
    ???
/usr/local/lib/python3.7/site-packages/numpy/core/numeric.py:2171: in allclose
    res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))
<__array_function__ internals>:6: in isclose
    ???
/usr/local/lib/python3.7/site-packages/numpy/core/numeric.py:2260: in isclose
    x = asanyarray(a)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = [array([[2.2, 0.8, 2. ],
       [2.2, 0.8, 2. ],
       [2.2, 0.8, 2. ],
       [2.2, 0.8, 2. ],
       [2.2, 0.8, 2. ...2, 42, 42]), array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])]
dtype = None, order = None

    @set_module('numpy')
    def asanyarray(a, dtype=None, order=None):
        """Convert the input to an ndarray, but pass ndarray subclasses through.
    
        Parameters
        ----------
        a : array_like
            Input data, in any form that can be converted to an array.  This
            includes scalars, lists, lists of tuples, tuples, tuples of tuples,
            tuples of lists, and ndarrays.
        dtype : data-type, optional
            By default, the data-type is inferred from the input data.
        order : {'C', 'F'}, optional
            Whether to use row-major (C-style) or column-major
            (Fortran-style) memory representation.  Defaults to 'C'.
    
        Returns
        -------
        out : ndarray or an ndarray subclass
            Array interpretation of `a`.  If `a` is an ndarray or a subclass
            of ndarray, it is returned as-is and no copy is performed.
    
        See Also
        --------
        asarray : Similar function which always returns ndarrays.
        ascontiguousarray : Convert input to a contiguous array.
        asfarray : Convert input to a floating point ndarray.
        asfortranarray : Convert input to an ndarray with column-major
                         memory order.
        asarray_chkfinite : Similar function which checks input for NaNs and
                            Infs.
        fromiter : Create an array from an iterator.
        fromfunction : Construct an array by executing a function on grid
                       positions.
    
        Examples
        --------
        Convert a list into an array:
    
        >>> a = [1, 2]
        >>> np.asanyarray(a)
        array([1, 2])
    
        Instances of `ndarray` subclasses are passed through as-is:
    
        >>> a = np.array([(1.0, 2), (3.0, 4)], dtype='f4,i4').view(np.recarray)
        >>> np.asanyarray(a) is a
        True
    
        """
>       return array(a, dtype, copy=False, order=order, subok=True)
E       ValueError: could not broadcast input array from shape (5,3) into shape (5)

/usr/local/lib/python3.7/site-packages/numpy/core/_asarray.py:138: ValueError
========================= 3 failed, 6 passed in 9.32s ==========================